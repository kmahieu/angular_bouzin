{"ast":null,"code":"import _asyncToGenerator from \"/root/bouzin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, map } from 'rxjs';\nimport Dao from 'src/app/dao/dao';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/api/api.service\";\nexport class OfferService extends Dao {\n  constructor(apiService) {\n    super();\n    this.apiService = apiService;\n    this.offers = [];\n    this.observableOffers = new BehaviorSubject(this.offers);\n    console.log('OfferService created');\n  } // methode qui permet de peupler notre local storage \n\n\n  setObversableOffers() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // utilise get data de mon api service\n      yield _this.apiService.getData()\n      /* si il ny a pas d'erreur on set les donnees recupere dans le local storage\n      avec la methode addData de notre dao\n      et on update notre behavior subject */\n      .then(offers => {\n        _this.addData(offers);\n\n        _this.updateOffers(offers);\n      }).catch(errormessage => {\n        /* si il y a une erreur on utilise les donner du local storage\n        et on update notre behavior subject */\n        console.log(errormessage);\n        const localOffer = localStorage.getItem('data');\n\n        if (localOffer !== null) {\n          _this.updateOffers(JSON.parse(localOffer));\n        }\n      });\n    })();\n  }\n\n  getObservableOffers() {\n    this.setObversableOffers();\n    return this.observableOffers.asObservable();\n  }\n\n  getObservableOffer(id) {\n    return this.observableOffers.asObservable().pipe(map(offers => offers.find(offer => offer.id === id)));\n  }\n\n  getSubjectOffer() {\n    return this.observableOffers;\n  }\n\n  addOffer(offer) {\n    this.observableOffers.getValue().push(offer);\n    this.getSubjectOffer().next(this.observableOffers.getValue());\n  }\n\n  updateOffers(offers) {\n    this.updateData(offers);\n    this.getSubjectOffer().next(offers);\n  }\n\n  selecteOffer(offer) {\n    this.selectedOffer = offer;\n  }\n\n  blacklistedUnBlacklisteOffer(offer) {\n    this.observableOffers.getValue().find(o => {\n      if (o.id === offer.id) {\n        o.isBlacklisted = !o.isBlacklisted;\n        console.log(o);\n      }\n\n      this.observableOffers.next(this.observableOffers.getValue());\n    });\n  }\n\n  favoriteUnFavoriteOffer(offer) {\n    this.observableOffers.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isFavorite = !o.isFavorite;\n        console.log(o);\n      }\n\n      this.observableOffers.next(this.observableOffers.getValue());\n    });\n  }\n\n  applyOffer(offer) {\n    this.observableOffers.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isApply = !o.isApply;\n        console.log(o);\n      }\n\n      this.observableOffers.next(this.observableOffers.getValue());\n    });\n  }\n\n  openOffer(offer) {\n    this.observableOffers.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isOpen = !o.isOpen;\n        console.log(o);\n      }\n\n      this.observableOffers.next(this.observableOffers.getValue());\n    });\n  }\n\n  getBlackLidtOffer() {\n    return this.observableOffers.asObservable().pipe(map(offers => offers.filter(o => o.isBlacklisted)), map(offers => offers.length));\n  }\n\n}\n\nOfferService.ɵfac = function OfferService_Factory(t) {\n  return new (t || OfferService)(i0.ɵɵinject(i1.ApiService));\n};\n\nOfferService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OfferService,\n  factory: OfferService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","Dao","OfferService","constructor","apiService","offers","console","log","setObversableOffers","getData","then","addData","updateOffers","catch","errormessage","localOffer","localStorage","getItem","JSON","parse","getObservableOffers","observableOffers","asObservable","getObservableOffer","id","pipe","find","offer","getSubjectOffer","addOffer","getValue","push","next","updateData","selecteOffer","selectedOffer","blacklistedUnBlacklisteOffer","o","isBlacklisted","favoriteUnFavoriteOffer","isFavorite","applyOffer","isApply","openOffer","isOpen","getBlackLidtOffer","filter","length","i0","factory","providedIn"],"sourceRoot":"","sources":["/root/bouzin/src/app/buisness/offer/services/offer.service.ts"],"sourcesContent":["/* It's a service that manages the offers */\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, firstValueFrom, lastValueFrom, map, Observable, Subject } from 'rxjs';\nimport { ApiService } from 'src/app/api/api.service';\nimport Dao from 'src/app/dao/dao';\nimport { Offer } from '../models/offer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OfferService extends Dao<Offer>{\n\n  selectedOffer?: Offer;\n\n  offers: Offer[] = [];\n\n  private observableOffers = new BehaviorSubject<Offer[]>(this.offers);\n\n  constructor(\n    private apiService: ApiService,\n  ) { \n    super();\n    console.log('OfferService created');\n  } \n\n  // methode qui permet de peupler notre local storage \n  async setObversableOffers(): Promise<void> \n  {\n    // utilise get data de mon api service\n    await this.apiService.getData()\n    /* si il ny a pas d'erreur on set les donnees recupere dans le local storage \n    avec la methode addData de notre dao\n    et on update notre behavior subject */\n    .then(offers => {\n      this.addData(offers);\n      this.updateOffers(offers);\n    })\n    .catch(errormessage => {\n      /* si il y a une erreur on utilise les donner du local storage\n      et on update notre behavior subject */\n      console.log(errormessage);\n      const localOffer = localStorage.getItem('data');\n      if (localOffer !== null) {\n        this.updateOffers(JSON.parse(localOffer))\n      }\n     }\n    );\n  }\n\n  getObservableOffers(): Observable<Offer[]> {\n    this.setObversableOffers()\n    return this.observableOffers.asObservable();\n  }\n\n  getObservableOffer(id: string): Observable<Offer | undefined> {\n    return this.observableOffers.asObservable()\n      .pipe(\n        map(offers => offers.find(offer => offer.id === id))\n      );\n  }\n\n  getSubjectOffer(): Subject<Offer[]> {\n    return this.observableOffers;\n  }\n\n  addOffer(offer: Offer): void {\n    this.observableOffers.getValue().push(offer);\n    this.getSubjectOffer().next(this.observableOffers.getValue());\n  }\n\n  updateOffers(offers: Offer[]): void {\n    this.updateData(offers);\n    this.getSubjectOffer().next(offers);\n  }\n\n  selecteOffer(offer: Offer): void { \n    this.selectedOffer = offer;\n  }\n\n  blacklistedUnBlacklisteOffer(offer: Offer): void {\n    this.observableOffers.getValue().find(o => {\n      if (o.id === offer.id) {\n        o.isBlacklisted = !o.isBlacklisted;\n        console.log(o)\n      }\n      this.observableOffers.next(this.observableOffers.getValue());\n    })}\n\n  favoriteUnFavoriteOffer(offer: Offer): void {\n      this.observableOffers.getValue().find(o => {\n        if (offer.id === o.id) {\n          o.isFavorite = !o.isFavorite;\n          console.log(o)\n        }\n        this.observableOffers.next(this.observableOffers.getValue());\n    })\n  }\n\n  applyOffer(offer: Offer): void {\n    this.observableOffers.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isApply = !o.isApply;\n        console.log(o)\n      }\n      this.observableOffers.next(this.observableOffers.getValue());\n  })\n  }\n\n  openOffer(offer: Offer): void {\n    this.observableOffers.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isOpen = !o.isOpen;\n        console.log(o)\n      }\n      this.observableOffers.next(this.observableOffers.getValue());\n    })}\n\n  getBlackLidtOffer(): Observable<number> {\n    return this.observableOffers.asObservable()\n      .pipe(\n        map(offers => offers.filter(o => o.isBlacklisted)),\n        map(offers => offers.length)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}