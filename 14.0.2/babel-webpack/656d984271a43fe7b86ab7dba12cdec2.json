{"ast":null,"code":"import _asyncToGenerator from \"/root/bouzin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { skipWhile } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, lastValueFrom, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TokensService {\n  constructor(http) {\n    this.http = http;\n    this.token = new BehaviorSubject(\"\"); // le problème vient de là\n\n    this.token.subscribe(t => localStorage.setItem('tkn', t));\n    this.http.get('http://localhost:3000/token', {\n      headers: new HttpHeaders({\n        'Accept': '*/*'\n      })\n    }).subscribe(token => this.setToken(token.value));\n  }\n\n  setToken(token) {\n    this.token.next(token);\n    return this.token.asObservable();\n  }\n\n  getToken() {\n    return this.token.asObservable().pipe(skipWhile(tkn => tkn === ''));\n  }\n\n}\n\nTokensService.ɵfac = function TokensService_Factory(t) {\n  return new (t || TokensService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nTokensService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokensService,\n  factory: TokensService.ɵfac,\n  providedIn: 'root'\n});\nlet OfferService = class OfferService {\n  constructor(http, ts) {\n    this.http = http;\n    this.ts = ts;\n    this.API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?range=2-10';\n    this.observableOffers = new BehaviorSubject([{\n      designation: \"Dev front\",\n      isBlacklisted: false\n    }, {\n      designation: \"Dev back\",\n      isBlacklisted: false\n    }, {\n      designation: \"Full stack\",\n      isBlacklisted: false\n    }]);\n  }\n\n  getObservableOffers() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const tkn = yield _this.ts.getToken();\n      console.log(tkn);\n      return lastValueFrom(_this.http.get(_this.API_URL, {\n        headers: new HttpHeaders({\n          'Authorization': 'Bearer ' + tkn\n        })\n      }).pipe(map(data => {\n        let list = [];\n        data.resultats.forEach(e => {\n          list.push({\n            designation: e.intitule\n          });\n        });\n        return list;\n      })));\n    })();\n  }\n\n  getSubjectOffers() {\n    return this.observableOffers;\n  }\n\n  addOffer(offer) {\n    this.observableOffers.getValue().push(offer);\n    this.getSubjectOffers().next(this.observableOffers.getValue());\n  }\n\n  updateOffers(offers) {\n    this.getSubjectOffers().next(offers);\n  }\n\n};\nOfferService = __decorate([Injectable({\n  providedIn: 'root'\n})], OfferService);\nexport { OfferService };","map":{"version":3,"mappings":"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","names":["skipWhile","HttpHeaders","Injectable","BehaviorSubject","lastValueFrom","map","TokensService","constructor","http","token","subscribe","t","localStorage","setItem","get","headers","setToken","value","next","asObservable","getToken","pipe","tkn","i0","factory","providedIn","OfferService","ts","designation","isBlacklisted","getObservableOffers","console","log","API_URL","data","list","resultats","forEach","e","push","intitule","getSubjectOffers","observableOffers","addOffer","offer","getValue","updateOffers","offers"],"sourceRoot":"","sources":["/root/bouzin/src/app/auth/services/tokens.service.ts"],"sourcesContent":["\nimport { every, find, skipWhile } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokensService {\n\n\n  private token = new BehaviorSubject<string>(\"\"); // le problème vient de là\n\n\n  constructor(\n    private http: HttpClient\n  ) {\n\n    this.token.subscribe(t => localStorage.setItem('tkn',t));\n\n    this.http.get('http://localhost:3000/token', {\n      headers : new HttpHeaders({\n        'Accept' : '*/*'\n      })\n    }).subscribe( (token: any) => this.setToken(token.value))\n  }\n\nsetToken(token: string): Observable<string>{\n    this.token.next(token);\n    return this.token.asObservable();\n  }\n\n  getToken(): Observable<string> {\n    return  this.token.asObservable().pipe(skipWhile(tkn => tkn === ''));\n  }\n\n\n\n}\nimport { TokensService } from './../../../authentication/services/tokens.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, InjectionToken } from '@angular/core';\nimport { BehaviorSubject, firstValueFrom, lastValueFrom, map, merge, Observable, Subject, take } from 'rxjs';\nimport { Offer } from '../models/offer';\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OfferService {\n\n  private API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?range=2-10';\n\n  private observableOffers = new BehaviorSubject<Offer[]>([\n    {designation : \"Dev front\",isBlacklisted : false},\n    {designation : \"Dev back\",isBlacklisted : false},\n    {designation : \"Full stack\",isBlacklisted : false}\n  ]);\n\n\n  constructor(\n    private http: HttpClient,\n    private ts: TokensService\n  ) { }\n\n   async getObservableOffers(): Promise<Offer[]>{\n\n    const tkn = await this.ts.getToken();\n\n    console.log(tkn);\n\n\n    return lastValueFrom(this.http.get<Offer[]>(this.API_URL , {\n      headers : new HttpHeaders({\n        'Authorization' : 'Bearer ' + tkn\n      })\n    })\n      .pipe(\n        map( (data: any) => {\n          let list = [] as Offer[];\n          data.resultats.forEach((e: any) => {\n            list.push({\n              designation : e.intitule\n            } as Offer)\n          })\n          return list as Offer[];\n        })\n      ))\n    ;\n  }\n\n\n  getSubjectOffers(): Subject<Offer[]>{\n    return this.observableOffers;\n  }\n\n  addOffer(offer: Offer): void {\n    this.observableOffers.getValue().push(offer);\n    this.getSubjectOffers().next(this.observableOffers.getValue());\n  }\n\n  updateOffers(offers: Offer[]): void {\n    this.getSubjectOffers().next(offers)\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}