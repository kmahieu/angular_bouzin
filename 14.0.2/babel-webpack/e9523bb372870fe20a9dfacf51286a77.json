{"ast":null,"code":"import _asyncToGenerator from \"/root/bouzin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/auth/services/tokens.service\";\nexport class OfferService {\n  constructor(httpClient, tokensService) {\n    this.httpClient = httpClient;\n    this.tokensService = tokensService;\n    this.offers = [];\n    /* It's creating a new BehaviorSubject object, which is a type of Subject. A Subject is an object\n    that\n    can emit values to its subscribers. A BehaviorSubject is a Subject that emits the last value it\n    received\n    to its subscribers. */\n\n    this.observableOffer = new BehaviorSubject(this.offers);\n    this.tkn = new BehaviorSubject(\"\");\n    this.API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search';\n    console.log('OfferService created');\n    this.fetchDataFromApi();\n  }\n\n  fetchDataFromApi() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.tokensService.getToken().subscribe(token => {\n        if (token !== '') {\n          _this.httpClient.get(_this.API_URL, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          }).subscribe(e => {\n            e.resultats.forEach(o => {\n              let newOffer = {\n                id: o.id,\n                designation: o.intitule,\n                description: o.description,\n                contract: o.typeContrat,\n                salary: o.salaire.libelle,\n                isApply: false,\n                isFavorite: false,\n                isBlacklisted: false,\n                isOpen: false\n              };\n\n              _this.addOffer(newOffer);\n            });\n          });\n        }\n      });\n    })();\n  }\n\n  getRandomInt() {\n    return Math.floor(Math.random() * 10000000000000000000).toString();\n  }\n\n  getObservableOffers() {\n    return this.observableOffer.asObservable();\n  }\n\n  getObservableOffer(id) {\n    return this.observableOffer.asObservable().pipe(map(offers => offers.find(offer => offer.id === id)));\n  }\n\n  getSubjectOffer() {\n    return this.observableOffer;\n  }\n\n  addOffer(offer) {\n    this.observableOffer.getValue().push(offer);\n    this.getSubjectOffer().next(this.observableOffer.getValue());\n  }\n\n  updateOffer(offer) {\n    this.getSubjectOffer().next(offer);\n  }\n\n  selecteOffer(offer) {\n    this.selectedOffer = offer;\n  }\n\n  blacklistedUnBlacklisteOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (o.id === offer.id) {\n        o.isBlacklisted = !o.isBlacklisted;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  favoriteUnFavoriteOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isFavorite = !o.isFavorite;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  applyOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isApply = !o.isApply;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  openOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isOpen = !o.isOpen;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  getBlackLidtOffer() {\n    return this.observableOffer.asObservable().pipe(map(offers => offers.filter(o => o.isBlacklisted)), map(offers => offers.length));\n  }\n\n}\n\nOfferService.ɵfac = function OfferService_Factory(t) {\n  return new (t || OfferService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokensService));\n};\n\nOfferService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OfferService,\n  factory: OfferService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","OfferService","constructor","httpClient","tokensService","offers","console","log","fetchDataFromApi","getToken","subscribe","token","get","API_URL","headers","Authorization","e","resultats","forEach","o","newOffer","id","designation","intitule","description","contract","typeContrat","salary","salaire","libelle","isApply","isFavorite","isBlacklisted","isOpen","addOffer","getRandomInt","Math","floor","random","toString","getObservableOffers","observableOffer","asObservable","getObservableOffer","pipe","find","offer","getSubjectOffer","getValue","push","next","updateOffer","selecteOffer","selectedOffer","blacklistedUnBlacklisteOffer","favoriteUnFavoriteOffer","applyOffer","openOffer","getBlackLidtOffer","filter","length","i0","factory","providedIn"],"sourceRoot":"","sources":["/root/bouzin/src/app/buisness/offer/services/offer.service.ts"],"sourcesContent":["/* It's a service that manages the offers */\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, map, Observable, Subject } from 'rxjs';\nimport { TokensService } from 'src/app/auth/services/tokens.service';\nimport { ApiOffer } from '../models/apiOffer';\nimport { Data } from '../models/data';\nimport { Offer } from '../models/offer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OfferService {\n\n  selectedOffer?: Offer;\n\n  offers: Offer[] = [];\n\n  /* It's creating a new BehaviorSubject object, which is a type of Subject. A Subject is an object\n  that\n  can emit values to its subscribers. A BehaviorSubject is a Subject that emits the last value it\n  received\n  to its subscribers. */\n  private observableOffer = new BehaviorSubject<Offer[]>(this.offers);\n  private tkn = new BehaviorSubject<string>(\"\");\n\n  private API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search'\n\n  constructor(\n    private httpClient: HttpClient,\n    private tokensService: TokensService,\n  ) {\n    console.log('OfferService created');\n    this.fetchDataFromApi()\n  }\n\n  async fetchDataFromApi(): Promise<void> {\n\n    await this.tokensService.getToken().subscribe(token => {\n      if (token !== '') {\n        this.httpClient.get<Offer[]>(this.API_URL,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .subscribe(\n          (e : any) => {\n            e.resultats.forEach((o : any) => {\n              let newOffer: Offer = (\n                {\n                  id: o.id,\n                  designation: o.intitule,\n                  description: o.description,\n                  contract: o.typeContrat,\n                  salary: o.salaire.libelle,\n                  isApply: false,\n                  isFavorite: false,\n                  isBlacklisted: false,\n                  isOpen: false,\n                }\n              )\n              this.addOffer(newOffer);\n            })\n          }\n        )\n      }\n     })\n\n  }\n\n  getRandomInt(): String {\n    return Math.floor(Math.random() * 10000000000000000000).toString();\n  }\n\n  getObservableOffers(): Observable<Offer[]> {\n    return this.observableOffer.asObservable();\n  }\n\n  getObservableOffer(id: string): Observable<Offer | undefined> {\n    return this.observableOffer.asObservable()\n      .pipe(\n        map(offers => offers.find(offer => offer.id === id))\n      );\n  }\n\n  getSubjectOffer(): Subject<Offer[]> {\n    return this.observableOffer;\n  }\n\n  addOffer(offer: Offer): void {\n    this.observableOffer.getValue().push(offer);\n    this.getSubjectOffer().next(this.observableOffer.getValue());\n  }\n\n  updateOffer(offer: Offer[]): void {\n    this.getSubjectOffer().next(offer);\n  }\n\n  selecteOffer(offer: Offer): void {\n    this.selectedOffer = offer;\n  }\n\n  blacklistedUnBlacklisteOffer(offer: Offer): void {\n    this.observableOffer.getValue().find(o => {\n      if (o.id === offer.id) {\n        o.isBlacklisted = !o.isBlacklisted;\n        console.log(o)\n      }\n      this.observableOffer.next(this.observableOffer.getValue());\n    })}\n\n  favoriteUnFavoriteOffer(offer: Offer): void {\n      this.observableOffer.getValue().find(o => {\n        if (offer.id === o.id) {\n          o.isFavorite = !o.isFavorite;\n          console.log(o)\n        }\n        this.observableOffer.next(this.observableOffer.getValue());\n    })\n  }\n\n  applyOffer(offer: Offer): void {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isApply = !o.isApply;\n        console.log(o)\n      }\n      this.observableOffer.next(this.observableOffer.getValue());\n  })\n  }\n\n  openOffer(offer: Offer): void {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isOpen = !o.isOpen;\n        console.log(o)\n      }\n      this.observableOffer.next(this.observableOffer.getValue());\n    })}\n\n  getBlackLidtOffer(): Observable<number> {\n    return this.observableOffer.asObservable()\n      .pipe(\n        map(offers => offers.filter(o => o.isBlacklisted)),\n        map(offers => offers.length)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}