{"ast":null,"code":"import _asyncToGenerator from \"/root/bouzin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/auth/services/tokens.service\";\nexport class OfferService {\n  constructor(httpClient, tokensService) {\n    this.httpClient = httpClient;\n    this.tokensService = tokensService;\n    this.offers = [];\n    /* It's creating a new BehaviorSubject object, which is a type of Subject. A Subject is an object\n    that\n    can emit values to its subscribers. A BehaviorSubject is a Subject that emits the last value it\n    received\n    to its subscribers. */\n\n    this.observableOffer = new BehaviorSubject(this.offers);\n    this.API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search';\n    console.log('OfferService created');\n    this.getObservableOffers();\n  }\n\n  getObservableOffers() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.tokensService.getToken();\n\n      {}\n    })();\n  }\n\n  getRandomInt() {\n    return Math.floor(Math.random() * 10000000000000000000).toString();\n  } // getObservableOffers(): Observable<Offer[]> {\n  //   return this.observableOffer.asObservable();\n  // }\n\n\n  getObservableOffer(id) {\n    return this.observableOffer.asObservable().pipe(map(offers => offers.find(offer => offer.id === id)));\n  }\n\n  getSubjectOffer() {\n    return this.observableOffer;\n  }\n\n  addOffer(offer) {\n    this.observableOffer.getValue().push(offer);\n    this.getSubjectOffer().next(this.observableOffer.getValue());\n  }\n\n  updateOffer(offer) {\n    this.getSubjectOffer().next(offer);\n  }\n\n  selecteOffer(offer) {\n    this.selectedOffer = offer;\n  }\n\n  blacklistedUnBlacklisteOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (o.id === offer.id) {\n        o.isBlacklisted = !o.isBlacklisted;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  favoriteUnFavoriteOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isFavorite = !o.isFavorite;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  applyOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isApply = !o.isApply;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  openOffer(offer) {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isOpen = !o.isOpen;\n        console.log(o);\n      }\n\n      this.observableOffer.next(this.observableOffer.getValue());\n    });\n  }\n\n  getBlackLidtOffer() {\n    return this.observableOffer.asObservable().pipe(map(offers => offers.filter(o => o.isBlacklisted)), map(offers => offers.length));\n  }\n\n}\n\nOfferService.ɵfac = function OfferService_Factory(t) {\n  return new (t || OfferService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokensService));\n};\n\nOfferService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OfferService,\n  factory: OfferService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","OfferService","constructor","httpClient","tokensService","offers","console","log","getObservableOffers","getToken","getRandomInt","Math","floor","random","toString","getObservableOffer","id","observableOffer","asObservable","pipe","find","offer","getSubjectOffer","addOffer","getValue","push","next","updateOffer","selecteOffer","selectedOffer","blacklistedUnBlacklisteOffer","o","isBlacklisted","favoriteUnFavoriteOffer","isFavorite","applyOffer","isApply","openOffer","isOpen","getBlackLidtOffer","filter","length","i0","factory","providedIn"],"sourceRoot":"","sources":["/root/bouzin/src/app/buisness/offer/services/offer.service.ts"],"sourcesContent":["/* It's a service that manages the offers */\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, lastValueFrom, map, Observable, Subject } from 'rxjs';\nimport { TokensService } from 'src/app/auth/services/tokens.service';\nimport { ApiOffer } from '../models/apiOffer';\nimport { Data } from '../models/data';\nimport { Offer } from '../models/offer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OfferService {\n\n  selectedOffer?: Offer;\n\n  offers: Offer[] = [];\n\n  /* It's creating a new BehaviorSubject object, which is a type of Subject. A Subject is an object\n  that\n  can emit values to its subscribers. A BehaviorSubject is a Subject that emits the last value it\n  received\n  to its subscribers. */\n  private observableOffer = new BehaviorSubject<Offer[]>(this.offers);\n\n  private API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search'\n\n  constructor(\n    private httpClient: HttpClient,\n    private tokensService: TokensService,\n  ) {\n    console.log('OfferService created');\n    this.getObservableOffers()\n  }\n\n  async getObservableOffers(): Promise<Offer[]> {\n\n   this.tokensService.getToken(){\n\n   }\n\n      \n\n  }\n\n  getRandomInt(): String {\n    return Math.floor(Math.random() * 10000000000000000000).toString();\n  }\n\n  // getObservableOffers(): Observable<Offer[]> {\n  //   return this.observableOffer.asObservable();\n  // }\n\n  getObservableOffer(id: string): Observable<Offer | undefined> {\n    return this.observableOffer.asObservable()\n      .pipe(\n        map(offers => offers.find(offer => offer.id === id))\n      );\n  }\n\n  getSubjectOffer(): Subject<Offer[]> {\n    return this.observableOffer;\n  }\n\n  addOffer(offer: Offer): void {\n    this.observableOffer.getValue().push(offer);\n    this.getSubjectOffer().next(this.observableOffer.getValue());\n  }\n\n  updateOffer(offer: Offer[]): void {\n    this.getSubjectOffer().next(offer);\n  }\n\n  selecteOffer(offer: Offer): void {\n    this.selectedOffer = offer;\n  }\n\n  blacklistedUnBlacklisteOffer(offer: Offer): void {\n    this.observableOffer.getValue().find(o => {\n      if (o.id === offer.id) {\n        o.isBlacklisted = !o.isBlacklisted;\n        console.log(o)\n      }\n      this.observableOffer.next(this.observableOffer.getValue());\n    })}\n\n  favoriteUnFavoriteOffer(offer: Offer): void {\n      this.observableOffer.getValue().find(o => {\n        if (offer.id === o.id) {\n          o.isFavorite = !o.isFavorite;\n          console.log(o)\n        }\n        this.observableOffer.next(this.observableOffer.getValue());\n    })\n  }\n\n  applyOffer(offer: Offer): void {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isApply = !o.isApply;\n        console.log(o)\n      }\n      this.observableOffer.next(this.observableOffer.getValue());\n  })\n  }\n\n  openOffer(offer: Offer): void {\n    this.observableOffer.getValue().find(o => {\n      if (offer.id === o.id) {\n        o.isOpen = !o.isOpen;\n        console.log(o)\n      }\n      this.observableOffer.next(this.observableOffer.getValue());\n    })}\n\n  getBlackLidtOffer(): Observable<number> {\n    return this.observableOffer.asObservable()\n      .pipe(\n        map(offers => offers.filter(o => o.isBlacklisted)),\n        map(offers => offers.length)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}