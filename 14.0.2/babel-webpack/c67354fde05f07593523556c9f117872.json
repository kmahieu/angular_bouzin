{"ast":null,"code":"import _asyncToGenerator from \"/root/bouzin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { firstValueFrom, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth/services/tokens.service\";\nexport class ApiService {\n  constructor(httpClient, tokensService) {\n    this.httpClient = httpClient;\n    this.tokensService = tokensService;\n    this.API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?range=0-5';\n  }\n\n  getData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield firstValueFrom(_this.tokensService.getToken());\n      return firstValueFrom(_this.httpClient.get(_this.API_URL, {\n        headers: new HttpHeaders({\n          'Authorization': 'Bearer ' + token\n        })\n      }).pipe(map(data => {\n        let list = [];\n        data.resultats.forEach(o => {\n          list.push({\n            id: o.id,\n            designation: o.intitule,\n            description: o.description,\n            contract: o.typeContrat,\n            salary: o.salaire.libelle,\n            isApply: false,\n            isFavorite: false,\n            isBlacklisted: false,\n            isOpen: false\n          });\n        });\n        return list;\n      })));\n    })();\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokensService));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,WAArB,QAAwC,sBAAxC;AAEA,SAASC,cAAT,EAAyBC,GAAzB,QAAoC,MAApC;;;;AAOA,OAAM,MAAOC,UAAP,CAAiB;EAIrBC,YACUC,UADV,EAEUC,aAFV,EAEsC;IAD5B;IACA;IAJF,eAAU,iFAAV;EAKH;;EAECC,OAAO;IAAA;;IAAA;MAEX,MAAMC,KAAK,SAASP,cAAc,CAAC,KAAI,CAACK,aAAL,CAAmBG,QAAnB,EAAD,CAAlC;MAEA,OAAOR,cAAc,CAAC,KAAI,CAACI,UAAL,CAAgBK,GAAhB,CAA6B,KAAI,CAACC,OAAlC,EAA2C;QAC/DC,OAAO,EAAE,IAAIZ,WAAJ,CAAgB;UACvB,iBAAiB,YAAYQ;QADN,CAAhB;MADsD,CAA3C,EAKnBK,IALmB,CAMlBX,GAAG,CAAEY,IAAD,IAAc;QAChB,IAAIC,IAAI,GAAG,EAAX;QACAD,IAAI,CAACE,SAAL,CAAeC,OAAf,CAAwBC,CAAD,IAAW;UAChCH,IAAI,CAACI,IAAL,CAAU;YACRC,EAAE,EAAEF,CAAC,CAACE,EADE;YAERC,WAAW,EAAEH,CAAC,CAACI,QAFP;YAGRC,WAAW,EAAEL,CAAC,CAACK,WAHP;YAIRC,QAAQ,EAAEN,CAAC,CAACO,WAJJ;YAKRC,MAAM,EAAER,CAAC,CAACS,OAAF,CAAUC,OALV;YAMRC,OAAO,EAAE,KAND;YAORC,UAAU,EAAE,KAPJ;YAQRC,aAAa,EAAE,KARP;YASRC,MAAM,EAAE;UATA,CAAV;QAWD,CAZD;QAaA,OAAOjB,IAAP;MACD,CAhBE,CANe,CAAD,CAArB;IAJW;EA4BZ;;AArCoB;;;mBAAVZ,YAAU8B;AAAA;;;SAAV9B;EAAU+B,SAAV/B,UAAU;EAAAgC,YAFT","names":["HttpHeaders","firstValueFrom","map","ApiService","constructor","httpClient","tokensService","getData","token","getToken","get","API_URL","headers","pipe","data","list","resultats","forEach","o","push","id","designation","intitule","description","contract","typeContrat","salary","salaire","libelle","isApply","isFavorite","isBlacklisted","isOpen","i0","factory","providedIn"],"sourceRoot":"","sources":["/root/bouzin/src/app/api/api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom, map } from 'rxjs';\nimport { TokensService } from '../auth/services/tokens.service';\nimport { Offer } from '../buisness/offer/models/offer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private API_URL = 'https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?range=0-5'\n\n  constructor(\n    private httpClient: HttpClient,\n    private tokensService: TokensService,\n  ) { }\n\n  async getData(): Promise<Offer[]> \n  {\n    const token = await firstValueFrom(this.tokensService.getToken());\n\n    return firstValueFrom(this.httpClient.get<Offer[]>(this.API_URL, {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + token\n      })\n    })\n      .pipe(\n        map((data: any) => {\n          let list = [] as Offer[];\n          data.resultats.forEach((o: any) => {\n            list.push({\n              id: o.id,\n              designation: o.intitule,\n              description: o.description,\n              contract: o.typeContrat,\n              salary: o.salaire.libelle,\n              isApply: false,\n              isFavorite: false,\n              isBlacklisted: false,\n              isOpen: false,\n            } as Offer)\n          })\n          return list;\n        })\n      ));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}